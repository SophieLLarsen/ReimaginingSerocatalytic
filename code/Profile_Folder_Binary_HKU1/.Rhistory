if (exposure == "Binary"){
paras <- c(
rho_m = coeff$rho_m,
rho_1 = as.numeric(rho_val),
lambda_0 = coeff$lambda_0
)} else if (exposure == "Ordered" & strain_type == "HKU1_S1"){
paras <- c(rho_m = coeff$rho_m,
w1 = 1,
w2 = 1,
w3 = 1,
w4 = 1,
rho_5 = as.numeric(rho_val),
b0 = coeff$b0,
b1 = coeff$b1,
b2 = coeff$b2,
b3 = coeff$b3,
lambda_4 = coeff$lambda_4)
} else if (exposure == "Ordered" & strain_type != "HKU1_S1"){
paras <- c(rho_m = coeff$rho_m,
w1 = 1,
w2 = 1,
w3 = 1,
rho_4 = as.numeric(rho_val),
b0 = coeff$b0,
b1 = coeff$b1,
b2 = coeff$b2,
lambda_3 = coeff$lambda_3)
} else if (exposure == "Variation" & strain_type == "HKU1_S1"){
paras = c(rho_m = coeff$rho_m,
w1 = 1,
w2 = 1,
w3 = 1,
w4 = 1,
rho_5 = as.numeric(rho_val),
l54 = coeff$l54,
l43 = coeff$l43,
l32 = coeff$l32,
l21 = coeff$l21,
l10 = coeff$l10,
b0 = coeff$b0,
b1 = coeff$b1,
b2 = coeff$b2,
b3 = coeff$b3)
} else {
paras = c(rho_m = coeff$rho_m,
w1 = 1,
w2 = 1,
w3 = 1,
rho_4 = as.numeric(rho_val),
l43 = coeff$l43,
l32 = coeff$l32,
l21 = coeff$l21,
l10 = coeff$l10,
b0 = coeff$b0,
b1 = coeff$b1,
b2 = coeff$b2)
}
# print(pars)
times <- seq(0,70, by = 0.125) #by = .125)
serocatalytic_model_out <- ode(y = init, times = times, func = ODE_fun, parms = paras) %>% as.data.frame()
## double check the population math
df_out <- serocatalytic_model_out %>%
pivot_longer(-time, names_to = "State", values_to = "Value") %>%
separate(State, into = c("Type", "Serostatus"), sep = "_") %>%
group_by(time) %>%
mutate(pop = sum(Value)) %>%
ungroup() %>%
group_by(Serostatus, Type, time, pop) %>%
summarise(.groups = "keep", Value = sum(Value)) %>%
mutate(Prop = Value/pop) %>%
ungroup() %>%
rename(Group = Serostatus) %>%
mutate(Group = as.numeric(Group)+1) %>%
select(time, Prop, Type, Group) %>%
inner_join(data %>% select(time = Age_con,Group, Type), by = c("time","Type", "Group")) %>%
arrange(time, Type, Group)
return(df_out)
}
multi_grid_scenarios <- expand_grid(strain_type = c("HKU1_S1", "a_229E_S1", "NL63_S1", "OC43_HE"),
exposure = c("Ordered", "Variation"),
choose_rho = c("rho_05", "rho_95"),
waning = c("Direct", "Laddered"),
boundaries = c("Bounded", "Unbounded")
)
binary_grid_scenarios <- expand_grid(strain_type = c("HKU1_S1", "a_229E_S1", "NL63_S1", "OC43_HE"),
exposure = c("Binary"),
choose_rho = c("rho_05", "rho_95"),
waning = c("Direct"),
boundaries = c("Bounded")
)
full_grid <- rbind(multi_grid_scenarios, binary_grid_scenarios) %>%
arrange(exposure, choose_rho)
return_fits <- NULL
return_simulations <- NULL
for (i in 1:nrow(full_grid)){
t_start = 0
print(c(strain_type = full_grid$strain_type[i],
exposure = full_grid$exposure[i],
choose_rho = full_grid$choose_rho[i],
waning = full_grid$waning[i],
boundaries = full_grid$boundaries[i]))
get_fit <- fit_hypotheses(strain_type = full_grid$strain_type[i],
exposure = full_grid$exposure[i],
choose_rho = full_grid$choose_rho[i],
waning = full_grid$waning[i],
boundaries = full_grid$boundaries[i])
get_simulation <- get_sim_output(strain_type = full_grid$strain_type[i],
exposure = full_grid$exposure[i],
choose_rho = full_grid$choose_rho[i],
waning = full_grid$waning[i],
get_fit = get_fit) %>%
mutate(strain_type = full_grid$strain_type[i],
exposure = full_grid$exposure[i],
choose_rho = full_grid$choose_rho[i],
waning = full_grid$waning[i],
boundaries = full_grid$boundaries[i])
return_fits <- return_fits %>% rbind(get_fit)
return_simulations <- return_simulations %>% rbind(get_simulation)
}
write_csv(return_fits, "../data/data_hypotheses/return_fits.csv")
write_csv(return_simulations, "../data/data_hypotheses/return_simulations.csv")
return_fits <- read_csv("../data/data_hypotheses/return_fits.csv")
return_simulations <- read_csv("../data/data_hypotheses/return_simulations.csv")
AIC_choose <- return_fits %>%
select(strain, exposure_hypothesis, AIC, rho, waning, boundaries) %>%
group_by(strain, exposure_hypothesis) %>%
filter(AIC == min(AIC)) %>%
distinct() %>%
ungroup()
AIC_get_paras_grid_plot <- AIC_choose %>%
select(-AIC) %>%
inner_join(return_fits, by = c("strain", "exposure_hypothesis", "boundaries", "waning", "rho")) %>%
filter(exposure_hypothesis != "Binary") %>%
group_by(strain) %>%
filter(AIC == min(AIC)) %>%
ungroup() %>%
select(strain, paras, value = Estimate) %>%
pivot_wider(names_from = "paras", values_from = "value") %>%
mutate(l53 = b3*l54,
l52 = b2*l53,
l51 = b1*l52,
l50 = b0*l51,
l42 = b2*l43,
l41 = b1*l42,
l40 = b0*l41,
l31 = b1*l32,
l30 = b0*l31,
l20 = b0*l21
) %>%
select(-b0, -b1, -b2, -b3, -sigma, -rho_m) %>%
pivot_longer(`l54`:`l20`) %>%
mutate(name = fct_relevel(name, c("l10", "l20", "l30", "l40", "l50", "l21", "l31", "l41", "l51", "l32", "l42", "l52", "l43", "l53", "l54"))) %>%
mutate(strain = fct_relevel(strain, c("HKU1_S1", "OC43_HE", "NL63_S1", "a_229E_S1"))) %>%
ggplot() +
geom_tile(aes(y = strain, x = name, fill = log(1/value))) +
scale_fill_continuous(low = "darkblue", high = "#ffe8d5",guide="colorbar",na.value="transparent")
AIC_get_paras_grid_plot
# plot_sims_Ordered <- return_simulations %>%
#   filter(exposure == "Variation", waning == "Laddered", choose_rho == "rho_95", boundaries == "Bounded") %>%
#   ggplot(aes(x = time)) +
#   geom_line(aes(y = Prop, color = Type)) +
#   facet_grid(Group~strain_type)
# plot_sims_Ordered
view(AIC_choose)
get_binary_trajectory <- function(strain_type, choose_rho, reps, get_fit){
## grab waning parameter
if (choose_rho == "rho_05"){
rho_val = rho_05
} else {
rho_val = rho_95
}
## get data, pars
data <- read_csv("../data/data_hypotheses/gmm_out/data_all2.csv") %>% filter(strain == strain_type) %>% arrange(Age_con, Type, Group)
par_names <- c("rho_m", "lambda_0", "sigma")
## init
data_start <- data %>% filter(Age_con == 0)
init <- c(M_1 = data_start$sero_prop[data_start$Group == 2], P_0 = data_start$sero_prop[data_start$Group == 1], P_1 = 0)
reps_out <- NULL
print(strain_type)
for (k in 1:reps){
## weighted coin flip to assign the initial state of the individual
ladder_prop <- NULL
for (j in 1:length(init)){
propi <- sum(init[1:j])/sum(init)
ladder_prop <- c(ladder_prop, propi)
}
## choose state
prob <- runif(1)
if (prob < ladder_prop[1]){
serostatus = 0
state <- c(m1 = 0, p0 = 1, p1 = 0)
} else if (prob >= ladder_prop[1] & prob < ladder_prop[2]){
serostatus = 1
state <- c(m1 = 1, p0 = 0, p1 = 0)
}
## get coeffs for running the simulation, depending on the model type
## a229E not working?
coeff <- get_fit %>%
filter(exposure_hypothesis == "Binary", waning == "Direct", rho == "rho_95", strain == strain_type) %>%
select(paras, Estimate) %>%
pivot_wider(names_from = "paras", values_from = "Estimate")
paras <- c(rho_m = coeff$rho_m,
rho_1 = as.numeric(rho_val),
lambda_0 = coeff$lambda_0)
t = 0
trajectory <- NULL
trajectory <- trajectory %>% rbind(tibble(time = t, status = serostatus))
while (t < 70){
## get rates based on where the person is
rate_vec <- paras*state
## get sum of rates
rate_sum = sum(rate_vec)
## get time step
time_step = rexp(1, 1/rate_sum)
# draw a random number and use it to choose the probability
prob <- runif(1)
ladder_prop <- NULL
for (i in 1:length(rate_vec)){
propi <- sum(rate_vec[1:i])/rate_sum
ladder_prop <- c(ladder_prop, propi)
}
## choose event
if (prob < ladder_prop[1]){
## maternal revert
serostatus = 0
state <- c(m1 = 0, p0 = 1, p1 = 0)
} else if(prob >= ladder_prop[1] & prob < ladder_prop[2]){
## p1 revert to p0
serostatus = 0
state <- c(m1 = 0, p0 = 1, p1 = 0)
} else{
## p0 convert to p1
serostatus = 1
state <- c(m1 = 0, p0 = 0, p1 = 1)
}
t = t + time_step
trajectory <- trajectory %>% rbind(tibble(time = t, status = serostatus))
}
reps_out <- reps_out %>% rbind(trajectory %>% mutate(ID = k))
}
return(reps_out)
}
get_variation_trajectory <- function(strain_type, choose_rho, waning, reps, get_fit){
## set state vectors
## one copy of compartment per corresponding parameter, do not change order of params without changing order of states
state_P0 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 1,
p1 = 0, p0 = 1,
p2 = 0, p1 = 0, p0 = 1,
p3 = 0, p2 = 0, p1 = 0, p0 = 1,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 1)
state_P1 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 1, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 1, p0 = 0,
p2 = 0, p1 = 1, p0 = 0,
p3 = 0, p2 = 0, p1 = 1, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 1, p0 = 0)
state_P2 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 1, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 1, p1 = 0, p0 = 0,
p3 = 0, p2 = 1, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 1, p1 = 0, p0 = 0)
state_P3 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 1, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 1, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 1, p2 = 0, p1 = 0, p0 = 0)
state_P4 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 1, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 1, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_P5 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 1,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_M1 <-  c(m1 = 1, m2 = 0, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_M2 <-  c(m1 = 0, m2 = 1, m3 = 0, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_M3 <-  c(m1 = 0, m2 = 0, m3 = 1, m4 = 0, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_M4 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 1, m5 = 0,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
state_M5 <-  c(m1 = 0, m2 = 0, m3 = 0, m4 = 0, m5 = 1,
p1 = 0, p2 = 0, p3 = 0, p4 = 0, p5 = 0,
p0 = 0,
p1 = 0, p0 = 0,
p2 = 0, p1 = 0, p0 = 0,
p3 = 0, p2 = 0, p1 = 0, p0 = 0,
p4 = 0, p3 = 0, p2 = 0, p1 = 0, p0 = 0)
## grab waning parameter
if (choose_rho == "rho_05"){
rho_val = rho_05
} else{
rho_val = rho_95
}
## get data, pars
data <- read_csv("../data/data_hypotheses/gmm_out/data_all.csv") %>% filter(strain == strain_type) %>% arrange(Age_con, Type, Group)
data_start <- data %>% filter(Age_con == 0)
if (strain_type == "HKU1_S1"){
par_names <- c("rho_m", "l54", "l43", "l32", "l21", "l10", "b0", "b1", "b2", "b3", "sigma")
} else if (strain_type != "HKU1_S1"){
par_names <- c("rho_m", "l43", "l32", "l21", "l10", "b0", "b1", "b2", "sigma")
}
## init
if (strain_type != "HKU1_S1"){
init <- c(P_0 = data_start$sero_prop[data_start$Group == 1],
M_1 = data_start$sero_prop[data_start$Group == 2], P_1 = 0,
M_2 = data_start$sero_prop[data_start$Group == 3], P_2 = 0,
M_3 = data_start$sero_prop[data_start$Group == 4], P_3 = 0,
M_4 = data_start$sero_prop[data_start$Group == 5], P_4 = 0)
} else{
init <- c(P_0 = data_start$sero_prop[data_start$Group == 1],
M_1 = data_start$sero_prop[data_start$Group == 2], P_1 = 0,
M_2 = data_start$sero_prop[data_start$Group == 3], P_2 = 0,
M_3 = data_start$sero_prop[data_start$Group == 4], P_3 = 0,
M_4 = data_start$sero_prop[data_start$Group == 5], P_4 = 0,
M_5 = data_start$sero_prop[data_start$Group == 6], P_5 = 0
)
}
## start simulations
reps_out <- NULL
for (k in 1:reps){
## weighted coin flip to assign the initial state of the individual
if (strain_type != "HKU1_S1"){
ladder_prop <- NULL
for (j in 1:length(init)){
propi <- sum(init[1:j])/sum(init)
ladder_prop <- c(ladder_prop, propi)
}
## choose state
prob <- runif(1)
if (prob < ladder_prop[1]){
serostatus = 0
state <- state_P0
} else if (prob >= ladder_prop[1] & prob < ladder_prop[2]){
serostatus = 1
state <- state_M1
} else if (prob >= ladder_prop[3] & prob < ladder_prop[4]){
serostatus = 2
state <- state_M2
} else if (prob >= ladder_prop[5] & prob < ladder_prop[6]){
serostatus = 3
state <- state_M3
} else if (prob >= ladder_prop[7] & prob < ladder_prop[8]){
serostatus = 4
state <- state_M4
}
} else{
ladder_prop <- NULL
for (j in 1:length(init)){
propi <- sum(init[1:j])/sum(init)
ladder_prop <- c(ladder_prop, propi)
}
## choose state
prob <- runif(1)
if (prob < ladder_prop[1]){
serostatus = 0
state <- state_P0
} else if (prob >= ladder_prop[1] & prob < ladder_prop[2]){
serostatus = 1
state <- state_M1
} else if (prob >= ladder_prop[3] & prob < ladder_prop[4]){
serostatus = 2
state <- state_M2
} else if (prob >= ladder_prop[5] & prob < ladder_prop[6]){
serostatus = 3
state <- state_M3
} else if (prob >= ladder_prop[7] & prob < ladder_prop[8]){
serostatus = 4
state <- state_M4
} else if (prob >= ladder_prop[9] & prob < ladder_prop[10]){
serostatus = 5
state <- state_M5
}
}
coeff <- get_fit %>%
filter(strain == strain_type, exposure_hypothesis == "Variation", waning == "Laddered", boundaries == "Unbounded", rho == "rho_95") %>%
select(paras, Estimate) %>%
pivot_wider(names_from = "paras", values_from = "Estimate")
## get coeffs for running the simulation, depending on the model type
if (strain_type == "HKU1_S1"){
paras <- c(rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = coeff$rho_m,
rho_1 = as.numeric(rho_val), rho_2 = as.numeric(rho_val), rho_3 = as.numeric(rho_val), rho_4 = as.numeric(rho_val), rho_5 = as.numeric(rho_val),
l10 = coeff$l10,
l21 = coeff$l21, l20 = coeff$l21*coeff$b0,
l32 = coeff$l32, l31 = coeff$l32*coeff$b1, l30 = coeff$l32*coeff$b1*coeff$b0,
l43 = coeff$l43, l42 = coeff$l43*coeff$b2, l41 = coeff$l43*coeff$b2*coeff$b1, l40 = coeff$l43*coeff$b2*coeff$b1*coeff$b0,
l54 = coeff$l54, l53 = coeff$l54*coeff$b3, l52 = coeff$l54*coeff$b3*coeff$b2, l51 = coeff$l54*coeff$b3*coeff$b2*coeff$b1, l50 = coeff$l54*coeff$b3*coeff$b2*coeff$b1*coeff$b0)
} else if (strain_type != "HKU1_S1"){
paras <- c(rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = coeff$rho_m, rho_m = 0,
rho_1 = as.numeric(rho_val), rho_2 = as.numeric(rho_val), rho_3 = as.numeric(rho_val), rho_4 = as.numeric(rho_val), rho_5 = 0,
l10 = coeff$l10,
l21 = coeff$l21, l20 = coeff$l21*coeff$b0,
l32 = coeff$l32, l31 = coeff$l32*coeff$b1, l30 = coeff$l32*coeff$b1*coeff$b0,
l43 = coeff$l43, l42 = coeff$l43*coeff$b2, l41 = coeff$l43*coeff$b2*coeff$b1, l40 = coeff$l43*coeff$b2*coeff$b1*coeff$b0,
l54 = 0, l53 = 0, l52 = 0, l51 = 0, l50 = 0)
}
t = 0
trajectory <- NULL
trajectory <- trajectory %>% rbind(tibble(time = t, status = serostatus))
while (t < 70){
## get rates based on where the person is
rate_vec <- paras*state
## get sum of rates
rate_sum = sum(rate_vec)
## get time step
time_step = rexp(1, 1/rate_sum)
# draw a random number and use it to choose the probability
prob <- runif(1)
ladder_prop <- NULL
for (i in 1:length(rate_vec)){
propi <- sum(rate_vec[1:i])/rate_sum
ladder_prop <- c(ladder_prop, propi)
}
## choose event
if (prob < ladder_prop[6]){
## reversion to 0
serostatus = 0
state <- state_P0
} else if(prob >= ladder_prop[6] & prob < ladder_prop[7]){
## p2 revert to p1
serostatus = 1
state <- state_P1
} else if(prob >= ladder_prop[7] & prob < ladder_prop[8]){
## p3 revert to p2
serostatus = 2
state <- state_P2
} else if(prob >= ladder_prop[8] & prob < ladder_prop[9]){
## p4 revert to p3
serostatus = 3
state <- state_P3
} else if(prob >= ladder_prop[9] & prob < ladder_prop[10]){
## p5 revert to p4
serostatus = 4
state <- state_P4
} else if(prob >= ladder_prop[10] & prob < ladder_prop[11]){
## l10 - convert from 0 to 1
serostatus = 1
state <- state_P1
} else if(prob >= ladder_prop[11] & prob < ladder_prop[13]){
## l21, l20 - convert to 2
serostatus = 2
state <- state_P2
} else if(prob >= ladder_prop[13] & prob < ladder_prop[16]){
## l32, l31, l30 - convert to 3
serostatus = 3
state <- state_P3
} else if(prob >= ladder_prop[16] & prob < ladder_prop[20]){
## convert to 4
serostatus = 4
state <- state_P4
} else if(prob >= ladder_prop[20] & prob < ladder_prop[25]){
## convert to 5
serostatus = 5
state <- state_P5
}
t = t + time_step
trajectory <- trajectory %>% rbind(tibble(time = t, status = serostatus))
}
reps_out <- reps_out %>% rbind(trajectory %>% mutate(ID = k))
}
return(reps_out)
}
return_fits <- read_csv("../data/data_hypotheses/return_fits.csv")
grid_traj <- c("HKU1_S1", "OC43_HE","NL63_S1", "a_229E_S1")
binary_traj_dat <- NULL
multi_traj_dat <- NULL
for (h in 1:length(grid_traj)){
dat_h <- get_binary_trajectory(grid_traj[h], "rho_95", 300, return_fits)
dat_h <- dat_h %>% mutate(strain = grid_traj[h])
binary_traj_dat <- binary_traj_dat %>% rbind(dat_h)
}
for (h in 1:length(grid_traj)){
dat_h <- get_variation_trajectory(grid_traj[h], "rho_95", "Laddered", 300, return_fits)
dat_h <- dat_h %>% mutate(strain = grid_traj[h])
multi_traj_dat <- multi_traj_dat %>% rbind(dat_h)
}
write_csv(binary_traj_dat, "../data/data_hypotheses/binary_trajectories.csv")
write_csv(multi_traj_dat, "../data/data_hypotheses/variation_trajectories.csv")
