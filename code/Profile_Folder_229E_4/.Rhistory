print("Running right MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$upper[i],4)){
print("case 1")
parm_test_right = dt_profile$Estimate[i]
new_ll_right = -10^3
} else{
while (precision > 10e-5) {
print("case 2")
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_right >= upper_limit_var){
new_ll_right <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_right,
l43 = parm_test_right,
l32 = parm_test_right,
l21 = parm_test_right,
l10 = parm_test_right,
b0 = parm_test_right,
b1 = parm_test_right,
b2 = parm_test_right,
sigma = parm_test_right
)
fixed_listB <- fixed_listB[i]
## run mle and grab the new log likelihood
print(parm_test_right)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_listB,
lower = lower_listB,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
right_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_right <- right_ll
print
}
## If it equals the confidence threshold, stop
if (round(new_ll_right, 4) == round(conf_threshold, 4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_right > conf_threshold){
parm_test_right = parm_test_right + precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_right < conf_threshold){
parm_test_right = parm_test_right - precision
precision = precision/10
parm_test_right = parm_test_right + precision
}
}
}
## First, set the starting steps away from the parameter
precision = 1*dt_profile$Estimate[i]
parm_test_left = dt_profile$Estimate[i]  - precision ## start at the true parameter value minus first step
lower_limit_var <- dt_profile$lower[i]
print("Running left MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$lower[i],4)){
parm_test_left = dt_profile$Estimate[i]
new_ll_left = -10^3
}
else{
while (precision > 10e-5) {
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_left <= lower_limit_var){
new_ll_left <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_left,
l43 = parm_test_left,
l32 = parm_test_left,
l21 = parm_test_left,
l10 = parm_test_left,
b0 = parm_test_left,
b1 = parm_test_left,
b2 = parm_test_left,
sigma = parm_test_left
)
fixed_listB <- fixed_listB[i]
#print(parm_test_left)
## run mle and grab the new log likelihood
## run m1_A for starting param
print(parm_test_left)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_vec,
lower = lower_vec,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
left_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_left <- left_ll
}
## If it equals the confidence threshold, stop
if (round(new_ll_left,4) == round(conf_threshold,4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_left > conf_threshold){
parm_test_left = parm_test_left - precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_left < conf_threshold){
parm_test_left = parm_test_left + precision
precision = precision/10
parm_test_left = parm_test_left - precision
}
}
}
out_data <- tibble(param = dt_profile$paras[i],
loglik = dt_profile$loglik[1],
ll_05 = new_ll_left,
ll_95 = new_ll_right,
conf_05 = parm_test_left,
conf_95 = parm_test_right)
write_csv(out_data, paste("data_out/", dt_profile$paras[i], ".csv"))
}
ODE_fun <- variation_infection_model_4
t_start = 0 # set start time
profile_variation_4(ID)
#### Profile function ####
profile_variation_4 <- function(i){
dt_profile <- read_csv("data_in/return_fits.csv") %>%
filter(strain == "a_229E_S1", rho == "rho_95", boundaries == "Unbounded", waning == "Laddered", exposure_hypothesis == "Variation") %>%
select(paras, Estimate, loglik) %>%
mutate(upper = unlist(unname(c(list(rho_m = 365,
l43 = 365, l32 = 365, l21 = 365, l10 = 365,
b0 = 8000, b1 = 8000, b2 = 8000, sigma = 5)))),
lower = unlist(unname(c(list(rho_m = 0,
l43 = 1/80, l32 = 1/80, l21 = 1/80, l10 = 1/80,
b0 = 0, b1 = 0, b2 = 0, sigma = 0.001))))
)
data <- read_csv("data_in/data_all.csv") %>% filter(strain == "a_229E_S1") %>% arrange(Age_con, Type, Group)
## initial conditions
data_start <- data %>% filter(Age_con == 0)
init <- c(P_0 = data_start$sero_prop[data_start$Group == 1],
M_1 = data_start$sero_prop[data_start$Group == 2], P_1 = 0,
M_2 = data_start$sero_prop[data_start$Group == 3], P_2 = 0,
M_3 = data_start$sero_prop[data_start$Group == 4], P_3 = 0,
M_4 = data_start$sero_prop[data_start$Group == 5], P_4 = 0
)
## globally assign init
assign("init", init, envir = .GlobalEnv)
assign("data", data, envir = .GlobalEnv)
## grab the parameter estimate from the maximum likelihood
parm_test = dt_profile$Estimate[i]
## set up the start and upper/lowers for the first mle. If any parameters are on the boundary, shift slightly so that the start parms are not boundary parms.
start2 = list(
rho_m = dt_profile$Estimate[1],
l43 = dt_profile$Estimate[2],
l32 = dt_profile$Estimate[3],
l21 = dt_profile$Estimate[4],
l10 = dt_profile$Estimate[5],
b0 = dt_profile$Estimate[6],
b1 = dt_profile$Estimate[7],
b2 = dt_profile$Estimate[8] + 0.001,
sigma = dt_profile$Estimate[9]
)
upper_vec = list(rho_m = 365,  l43 = 365, l32 = 365, l21 = 365, l10 = 365,
b0 = 8000, b1 = 8000, b2 = 8000,  sigma = 5)
lower_vec = list(rho_m = 0,  l43 = 1/80, l32 = 1/80, l21 = 1/80, l10 = 1/80,
b0 = 0, b1 = 0, b2 = 0,  sigma = 0.001)
fixed_list2 = list(
rho_m =  parm_test,
l43 = parm_test,
l32 = parm_test,
l21 = parm_test,
l10 = parm_test,
b0 = parm_test,
b1 = parm_test,
b2 = parm_test,
sigma = parm_test
)
startB <- start2[-i] ## remove the one we are fixing
upper_listB <- upper_vec[-i]
lower_listB <- lower_vec[-i]
fixed_listB <- fixed_list2[i] ## make a list containing only the param we are fixing
conf_threshold <- dt_profile$loglik[1] - 1.92 ## grab the confidence threshold for log likelihood
## get right threshold
## First, set the starting steps away from the parameter
precision = 1*dt_profile$Estimate[i]
parm_test_right = dt_profile$Estimate[i] +  precision ## start at the true parameter value plus a step
upper_limit_var <- dt_profile$upper[i]
print("Running right MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$upper[i],4)){
parm_test_right = dt_profile$Estimate[i]
new_ll_right = -10^3
} else{
print("enter 2")
while (precision > 10e-5) {
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_right >= upper_limit_var){
new_ll_right <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_right,
l43 = parm_test_right,
l32 = parm_test_right,
l21 = parm_test_right,
l10 = parm_test_right,
b0 = parm_test_right,
b1 = parm_test_right,
b2 = parm_test_right,
sigma = parm_test_right
)
fixed_listB <- fixed_listB[i]
## run mle and grab the new log likelihood
print(parm_test_right)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_listB,
lower = lower_listB,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
right_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_right <- right_ll
print
}
## If it equals the confidence threshold, stop
if (round(new_ll_right, 4) == round(conf_threshold, 4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_right > conf_threshold){
parm_test_right = parm_test_right + precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_right < conf_threshold){
parm_test_right = parm_test_right - precision
precision = precision/10
parm_test_right = parm_test_right + precision
}
}
}
## First, set the starting steps away from the parameter
precision = 1*dt_profile$Estimate[i]
parm_test_left = dt_profile$Estimate[i]  - precision ## start at the true parameter value minus first step
lower_limit_var <- dt_profile$lower[i]
print("Running left MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$lower[i],4)){
parm_test_left = dt_profile$Estimate[i]
new_ll_left = -10^3
}
else{
while (precision > 10e-5) {
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_left <= lower_limit_var){
new_ll_left <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_left,
l43 = parm_test_left,
l32 = parm_test_left,
l21 = parm_test_left,
l10 = parm_test_left,
b0 = parm_test_left,
b1 = parm_test_left,
b2 = parm_test_left,
sigma = parm_test_left
)
fixed_listB <- fixed_listB[i]
#print(parm_test_left)
## run mle and grab the new log likelihood
## run m1_A for starting param
print(parm_test_left)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_vec,
lower = lower_vec,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
left_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_left <- left_ll
}
## If it equals the confidence threshold, stop
if (round(new_ll_left,4) == round(conf_threshold,4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_left > conf_threshold){
parm_test_left = parm_test_left - precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_left < conf_threshold){
parm_test_left = parm_test_left + precision
precision = precision/10
parm_test_left = parm_test_left - precision
}
}
}
out_data <- tibble(param = dt_profile$paras[i],
loglik = dt_profile$loglik[1],
ll_05 = new_ll_left,
ll_95 = new_ll_right,
conf_05 = parm_test_left,
conf_95 = parm_test_right)
write_csv(out_data, paste("data_out/", dt_profile$paras[i], ".csv"))
}
ODE_fun <- variation_infection_model_4
t_start = 0 # set start time
profile_variation_4(ID)
#### Profile function ####
profile_variation_4 <- function(i){
dt_profile <- read_csv("data_in/return_fits.csv") %>%
filter(strain == "a_229E_S1", rho == "rho_95", boundaries == "Unbounded", waning == "Laddered", exposure_hypothesis == "Variation") %>%
select(paras, Estimate, loglik) %>%
mutate(upper = unlist(unname(c(list(rho_m = 365,
l43 = 365, l32 = 365, l21 = 365, l10 = 365,
b0 = 8000, b1 = 8000, b2 = 8000, sigma = 5)))),
lower = unlist(unname(c(list(rho_m = 0,
l43 = 1/80, l32 = 1/80, l21 = 1/80, l10 = 1/80,
b0 = 0, b1 = 0, b2 = 0, sigma = 0.001))))
)
data <- read_csv("data_in/data_all.csv") %>% filter(strain == "a_229E_S1") %>% arrange(Age_con, Type, Group)
## initial conditions
data_start <- data %>% filter(Age_con == 0)
init <- c(P_0 = data_start$sero_prop[data_start$Group == 1],
M_1 = data_start$sero_prop[data_start$Group == 2], P_1 = 0,
M_2 = data_start$sero_prop[data_start$Group == 3], P_2 = 0,
M_3 = data_start$sero_prop[data_start$Group == 4], P_3 = 0,
M_4 = data_start$sero_prop[data_start$Group == 5], P_4 = 0
)
## globally assign init
assign("init", init, envir = .GlobalEnv)
assign("data", data, envir = .GlobalEnv)
## grab the parameter estimate from the maximum likelihood
parm_test = dt_profile$Estimate[i]
## set up the start and upper/lowers for the first mle. If any parameters are on the boundary, shift slightly so that the start parms are not boundary parms.
start2 = list(
rho_m = dt_profile$Estimate[1],
l43 = dt_profile$Estimate[2],
l32 = dt_profile$Estimate[3],
l21 = dt_profile$Estimate[4],
l10 = dt_profile$Estimate[5],
b0 = dt_profile$Estimate[6],
b1 = dt_profile$Estimate[7],
b2 = dt_profile$Estimate[8] + 0.001,
sigma = dt_profile$Estimate[9]
)
upper_vec = list(rho_m = 365,  l43 = 365, l32 = 365, l21 = 365, l10 = 365,
b0 = 8000, b1 = 8000, b2 = 8000,  sigma = 5)
lower_vec = list(rho_m = 0,  l43 = 1/80, l32 = 1/80, l21 = 1/80, l10 = 1/80,
b0 = 0, b1 = 0, b2 = 0,  sigma = 0.001)
fixed_list2 = list(
rho_m =  parm_test,
l43 = parm_test,
l32 = parm_test,
l21 = parm_test,
l10 = parm_test,
b0 = parm_test,
b1 = parm_test,
b2 = parm_test,
sigma = parm_test
)
startB <- start2[-i] ## remove the one we are fixing
upper_listB <- upper_vec[-i]
lower_listB <- lower_vec[-i]
fixed_listB <- fixed_list2[i] ## make a list containing only the param we are fixing
conf_threshold <- dt_profile$loglik[1] - 1.92 ## grab the confidence threshold for log likelihood
## get right threshold
## First, set the starting steps away from the parameter
precision = 1*dt_profile$Estimate[i]
parm_test_right = dt_profile$Estimate[i] +  precision ## start at the true parameter value plus a step
upper_limit_var <- dt_profile$upper[i]
print("Running right MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$upper[i],4)){
parm_test_right = dt_profile$Estimate[i]
new_ll_right = -10^3
} else{
print("enter 2")
print(precision)
while (precision > 10e-5) {
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_right >= upper_limit_var){
new_ll_right <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_right,
l43 = parm_test_right,
l32 = parm_test_right,
l21 = parm_test_right,
l10 = parm_test_right,
b0 = parm_test_right,
b1 = parm_test_right,
b2 = parm_test_right,
sigma = parm_test_right
)
fixed_listB <- fixed_listB[i]
## run mle and grab the new log likelihood
print(parm_test_right)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_listB,
lower = lower_listB,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
right_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_right <- right_ll
print
}
## If it equals the confidence threshold, stop
if (round(new_ll_right, 4) == round(conf_threshold, 4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_right > conf_threshold){
parm_test_right = parm_test_right + precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_right < conf_threshold){
parm_test_right = parm_test_right - precision
precision = precision/10
parm_test_right = parm_test_right + precision
}
}
}
## First, set the starting steps away from the parameter
precision = 1*dt_profile$Estimate[i]
parm_test_left = dt_profile$Estimate[i]  - precision ## start at the true parameter value minus first step
lower_limit_var <- dt_profile$lower[i]
print("Running left MLE")
if (round(dt_profile$Estimate[i],4) == round(dt_profile$lower[i],4)){
parm_test_left = dt_profile$Estimate[i]
new_ll_left = -10^3
}
else{
while (precision > 10e-5) {
## IF the test param has exceeded the allowed window for the parameter, we will not run the mle, and instead go back a step and adjust precision (treat it like it is < conf_threshold)
if (parm_test_left <= lower_limit_var){
new_ll_left <- -10^3 ## return dummy log likelihood that will always be outside the threshold
} ## OTHERWISE we will run the mle
else{
#parm_test <- parm_test + precision
## update the list of fixed parms
fixed_listB = list(
rho_m =  parm_test_left,
l43 = parm_test_left,
l32 = parm_test_left,
l21 = parm_test_left,
l10 = parm_test_left,
b0 = parm_test_left,
b1 = parm_test_left,
b2 = parm_test_left,
sigma = parm_test_left
)
fixed_listB <- fixed_listB[i]
#print(parm_test_left)
## run mle and grab the new log likelihood
## run m1_A for starting param
print(parm_test_left)
m1_prof = mle2(minuslogl = loglik4_variation,
start = startB,
data = data,
fixed = c(fixed_listB, rho = rho_95),
method="L-BFGS-B",
upper= upper_vec,
lower = lower_vec,
control=list(maxit=1000, trace=TRUE, parscale=abs(unlist(startB)))
)
left_ll <- -m1_prof@min ## grab the base likelihood for phase 1 (remember, we fit on the negative log likelihood, so this should have a minus sign in front)
new_ll_left <- left_ll
}
## If it equals the confidence threshold, stop
if (round(new_ll_left,4) == round(conf_threshold,4)){
break
}
## if it's above the threshold, shift the param again to the right
else if(new_ll_left > conf_threshold){
parm_test_left = parm_test_left - precision}
## if it's below the threshold, shift the param to the right but by less
else if(new_ll_left < conf_threshold){
parm_test_left = parm_test_left + precision
precision = precision/10
parm_test_left = parm_test_left - precision
}
}
}
out_data <- tibble(param = dt_profile$paras[i],
loglik = dt_profile$loglik[1],
ll_05 = new_ll_left,
ll_95 = new_ll_right,
conf_05 = parm_test_left,
conf_95 = parm_test_right)
write_csv(out_data, paste("data_out/", dt_profile$paras[i], ".csv"))
}
ODE_fun <- variation_infection_model_4
t_start = 0 # set start time
profile_variation_4(ID)
